#include "stdafx.h"
#include <memory.h>
#include "mathbase.h"
#include <minmax.h>
#include <crtdbg.h>
#include <math.h>
//#include <assert.h>

#ifndef ASSERT
//#define ASSERT assert
#define ASSERT _ASSERT
#endif

#ifdef _DEBUG
//#define new DEBUG_NEW
#endif

MATH_STATIC_DATA ZMatrixHead _mxInitHead = { 0, 0, 0, 0, 0, 0 };
MATH_STATIC_DATA ZMatrixHead* _pmxHeadNil = &_mxInitHead;

#define MATRIX_HEAD_DATABUF(pmxHead)	(REAL*)((BYTE*)(pmxHead)+sizeof(ZMatrixHead))
/*void SolveLineEqu1( ZRealMatrix& Ma, ZRealMatrix& Mb, ZRealMatrix& Mx )
{
ASSERT( (Mb.Col()==1) && (Mx.Col()==1) && (Ma.Col()==Ma.Row()) 
&& (Ma.Col()==Mx.Row()) && (Ma.Col()==Mb.Row()) );
SolveLineEqu1( (REAL*)Ma.GetArray(), (REAL*)Mb.GetArray(), (REAL*)Mx.GetArray(), Mb.Row() );
}
void SolveLineEqu1( ZRealMatrix& Ma, ZVect& Vb, ZVect& Vx )
{
ASSERT( (Ma.Col()==Ma.Row()) && (Ma.Col()==Vb.Size()) && (Ma.Col()==Vx.Size()) );
SolveLineEqu1( (REAL*)Ma.GetArray(), (REAL*)Vb.GetArray(), (REAL*)Vx.GetArray(), Vb.Size() );
}

  void SolveLineEqu( ZRealMatrix& Ma, ZRealMatrix& Mb, ZRealMatrix& Mx )
  {
  ASSERT( (Mb.Col()==Mx.Col()) && (Ma.Col()==Ma.Row()) 
  && (Ma.Col()==Mx.Row()) && (Ma.Col()==Mb.Row()) );
  SolveLineEqu( (REAL*)Ma.GetArray(), (REAL*)Mb.GetArray(), (REAL*)Mx.GetArray(),
  Mb.Row(), Mb.Col() );
  
}*/

/*------------------------------------------------------------------------*/
/*                                                                        */
/*  ZRealMatrix member function                                               */
/*                                                                        */
/*------------------------------------------------------------------------*/


/*void ZRealMatrix::Assign( REAL* s, int num )
{
	for( int i=0; i<Length(); i++ ){
		if( i<num )m_Data[i] = s[i];
		else m_Data[i] = 0;
	}
}


void ZRealMatrix::Assign( REAL** s )
{
	for( int i=0; i<Row(); i++ )
		for( int j=0; j<Col(); j++ )
            (*this)(i+1,j+1) = s[i][j];
}


void ZRealMatrix::Clear( REAL t )
{
	for( int i=0; i<Length(); i++ )
		m_Data[i] = t;
}


*/

/*----------------------------------------------------------------------------------
			protected member function of ZRealMatrix
----------------------------------------------------------------------------------*/
void ZRealMatrix::Init()
{
	m_pMatrixHead = _pmxHeadNil;
	m_nRowBase = m_nColBase = 1;
}

ZMatrixHead* ZRealMatrix::GetData() const
{
	return m_pMatrixHead;
}

int ZRealMatrix::InternalAddRef()
{
	ASSERT( !IsNull() );
	GetData()->nRef++;
	return GetData()->nRef;
}

int ZRealMatrix::InternalRelease()
{
	ASSERT( !IsNull() );
	GetData()->nRef--;
	return GetData()->nRef;
}

void ZRealMatrix::AllocBuffer( int nRow, int nCol )
{
	ASSERT( IsNull() );
	ASSERT( nRow>=1 && nCol>=1 );

	m_pMatrixHead = (ZMatrixHead*)new BYTE[sizeof(ZMatrixHead)+sizeof(REAL)*nRow*nCol];
	m_pMatrixHead->nDataLen = nRow*nCol;
	m_pMatrixHead->nRow = nRow;
	m_pMatrixHead->nCol = nCol;
	m_pMatrixHead->nRef = 0;
	m_pMatrixHead->pmxLocker = this;
	m_pMatrixHead->pMatrixData = MATRIX_HEAD_DATABUF(m_pMatrixHead);

	InternalAddRef();

	printf("Alloc buffer %d-%d\n", nRow, nCol );
}

void ZRealMatrix::Release()
{
	ASSERT( GetData()!=NULL );

	if( !IsNull() ){
		if( InternalRelease()==0 ){
			//the reference is zero, locked by itself or not, buffer must be freeed
			ASSERT( GetLocker()==NULL || GetLocker()==this );
			REAL* pMatrixData = GetData()->pMatrixData;
			if( NULL!=pMatrixData && pMatrixData!=MATRIX_HEAD_DATABUF(GetData()) ){
				delete[] pMatrixData;
			}
			printf("Releasing buffer %d-%d\n", GetRow(), GetCol() );
			delete[] m_pMatrixHead;
		}else{
			//release the lock if it's the locker, since the owner matrix will be destroyed,
			//the other matrix holding it will release the buffer later.
			if( GetLocker()==this ){
				UnlockBuffer();
			}
		}
		Init();
	}
/*	if( !IsNull() ){
		if( GetLocker()==this ){
			//the matrix data is locked by itself, so free the buffer
			REAL* pMatrixData = GetData()->pMatrixData;
			if( NULL!=pMatrixData && pMatrixData!=MATRIX_HEAD_DATABUF(GetData()) ){
				delete[] pMatrixData;
			}
			printf("Releasing buffer %d-%d\n", GetRow(), GetCol() );
			delete[] m_pMatrixHead;
		}
		Init();
	}
*/
}

void ZRealMatrix::AssignCopy( const ZRealMatrix& mx, BOOL bLockBuffer )
{
/*	if( mx.IsNull() ){
		Release();
		return;
	}

	if( mx.GetLocker()!=NULL && !IsNull() ){
		if( GetData()->nDataLen>=mx.GetSize() || GetSize()>=mx.GetSize() ){
			memcpy( GetMatrixData(), mx.GetMatrixData(), mx.GetSize()*sizeof(REAL) );
			GetData()->nRow = mx.GetRow();
			GetData()->nCol = mx.GetCol();
			m_nRowBase = mx.m_nRowBase;
			m_nColBase = mx.m_nColBase;
			return;
		}
	}

	if( IsNull() ){
		Release();
	}

	ASSERT( IsNull() );

	if( mx.GetLocker()==NULL ){
		m_pMatrixHead = mx.GetData();
		m_pMatrixHead->pmxLocker = this;
	}else{
		Create( mx.GetRow(), mx.GetCol(), mx.GetMatrixData() );
	}*/

	AssignCopy( mx.GetData(), bLockBuffer );
	m_nRowBase = mx.m_nRowBase;
	m_nColBase = mx.m_nColBase;
}

void ZRealMatrix::AssignCopy( ZMatrixHead* pmxHead, BOOL bLockBuffer )
{
	if( GetData()==pmxHead || pmxHead->pmxLocker==this )return;

	if( pmxHead==_pmxHeadNil ){
		Release();
		return;
	}

	if( pmxHead->pmxLocker==NULL ){
		//the buffer is not locked
		Release();
		m_pMatrixHead = pmxHead;
		InternalAddRef();
		if( bLockBuffer ){
			m_pMatrixHead->pmxLocker = this;
		}
		return;
	}
	
	//the buffer is locked, decide if I need alloc a new buffer
	int nSize = pmxHead->nRow*pmxHead->nCol;
	if( (GetLocker()==this || GetData()->nRef==1) &&
		(GetData()->nDataLen>=nSize || GetSize()>=nSize) ){
		//The copying buffer is locked by other matrix, or exclusively owned by it
		//and the holding buffer is long enough, 
		//so do not bother reallocating buffer again
		memcpy( GetMatrixData(), pmxHead->pMatrixData, nSize*sizeof(REAL) );
		GetData()->nRow = pmxHead->nRow;
		GetData()->nCol = pmxHead->nCol;
	}else{
		//the buffer is locked by other matrix, and must alloc a new buffer the copy
		//the matrix data
		Release();
		AllocBuffer( pmxHead->nRow, pmxHead->nCol );
		memcpy( GetMatrixData(), pmxHead->pMatrixData, nSize*sizeof(REAL) );
	}

	if( bLockBuffer && GetLocker()!=this ){
		ASSERT( GetLocker==NULL );
		LockBuffer();
	}else if( !bLockBuffer && GetLocker()!=NULL ){
		ASSERT( GetLocker()==this );
		UnlockBuffer();
	}
	return;

/*	int nSize = pmxHead->nRow*pmxHead->nCol;
	//pmxHead is not null, and GetData()!=null
	if( pmxHead->pmxLocker!=NULL && 
		(GetData()->nDataLen>=nSize || GetSize()>=nSize) ){
		//The copying buffer is locked by other matrix, but
		//the holding buffer is long enough, do not bother reallocating buffer again
		memcpy( GetMatrixData(), pmxHead->pMatrixData, nSize*sizeof(REAL) );
		GetData()->nRow = pmxHead->nRow;
		GetData()->nCol = pmxHead->nCol;
		return;
	}

	//must reallocate buffer or just lock the new buffer
	Release();
	ASSERT( IsNull() );

	if( pmxHead->pmxLocker==NULL ){
		//the buffer is not locked
		m_pMatrixHead = pmxHead;
		InternalAddRef();
		if( bLockBuffer ){
			m_pMatrixHead->pmxLocker = this;
		}
	}else{
		AllocBuffer( pmxHead->nRow, pmxHead->nCol );
		memcpy( GetMatrixData(), pmxHead->pMatrixData, nSize*sizeof(REAL) );
	}
*/
}

ZRealMatrix& ZRealMatrix::Neg()
{
	if( IsNull() )return *this;

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	for( int i=0; i<nSize; i++ ){
		pMxData[i] = -pMxData[i];
	}
	return *this;
}


ZRealMatrix& ZRealMatrix::Add( const ZRealMatrix& mx )
{
	ASSERT( GetRow()==mx.GetRow() && GetCol()==mx.GetCol() );

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	REAL* pMxOther = mx.GetMatrixData();
	
	for( int i=0; i<nSize; i++ ){
		pMxData[i] += pMxOther[i];
	}
	return *this;
}


ZRealMatrix& ZRealMatrix::Sub( const ZRealMatrix& mx )
{
	ASSERT( GetRow()==mx.GetRow() && GetCol()==mx.GetCol() );

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	REAL* pMxOther = mx.GetMatrixData();
	
	for( int i=0; i<nSize; i++ ){
		pMxData[i] -= pMxOther[i];
	}
	return *this;
}


ZRealMatrix& ZRealMatrix::Mul( REAL f )
{
	if( IsNull() )return *this;

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	for( int i=0; i<nSize; i++ ){
		pMxData[i] *= f;
	}
	return *this;
}

ZRealMatrix& ZRealMatrix::Div( REAL f )
{
	if( IsNull() )return *this;

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	for( int i=0; i<nSize; i++ ){
		pMxData[i] /= f;
	}
	return *this;
}

ZRealMatrix& ZRealMatrix::Mul( const ZRealMatrix& mx )
{
	AssignCopy( Mul( *(this), mx ), TRUE );
	return *this;
}

ZRealMatrix ZRealMatrix::Mul( const ZRealMatrix& mx1, const ZRealMatrix& mx2 ) const
{
	ASSERT( mx1.GetCol()==mx2.GetRow() );

	ZRealMatrix temp( mx1.GetRow(), mx2.GetCol(), 0.0 );

	REAL* prMxData1 = mx1.GetMatrixData();
	REAL* prMxData2 = mx2.GetMatrixData();
	REAL* pxMxTemp = temp.GetMatrixData();

	for( int i=0; i<mx1.GetRow(); i++ ){
		for( int j=1; j<mx2.GetRow(); j++ ){
			for( int k=0; k<temp.GetCol(); k++ ){
				pxMxTemp[i*temp.GetCol()+j] += prMxData1[i*mx1.GetCol()+k]*prMxData2[k*mx2.GetCol()+j];
			}
		}
	}
	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix& ZRealMatrix::Pow( int k )
{
	if( IsNull() )return *this;

	if( k==0 ){
		SetIdentity();
		return *this;
	}

	ZRealMatrix temp(*this);
	for( int i=0; i<abs(k); i++ ){
		temp.Mul( *this );
	}
	return *this;
}

/*----------------------------------------------------------------------------------
			public property member function of ZRealMatrix
----------------------------------------------------------------------------------*/
int ZRealMatrix::Index( int i, int j )const
{
	ASSERT( i>=m_nRowBase && i<m_nRowBase+GetRow() );
	ASSERT( j>=m_nColBase && j<m_nColBase+GetCol() );

	return (i-m_nRowBase)*GetCol() + j-m_nColBase;
}

int ZRealMatrix::GetRow() const
{
	return GetData()->nRow;
}

int ZRealMatrix::GetCol() const
{
	return GetData()->nCol;
}

int ZRealMatrix::GetSize() const
{
	return GetRow()*GetCol();
}

REAL* ZRealMatrix::GetMatrixData( ) const
{
	return GetData()->pMatrixData;
}

void ZRealMatrix::SetBaseIndex( int nRowBase, int nColBase )
{
	m_nRowBase = nRowBase;
	m_nColBase = nColBase;
}

void ZRealMatrix::GetBaseIndex( int& nRowBase, int& nColBase ) const
{
	nRowBase = m_nRowBase;
	nColBase = m_nColBase;
}

BOOL ZRealMatrix::IsNull() const
{
	return GetData()==_pmxHeadNil; 
}
/*----------------------------------------------------------------------------------
			public operator member function of ZRealMatrix
----------------------------------------------------------------------------------*/

ZRealMatrix::ZRealMatrix()
{
	Init();
}

ZRealMatrix::ZRealMatrix( int m, int n )
{
	Init();
	Create( m, n );
}

ZRealMatrix::ZRealMatrix( int m, int n, REAL rElement )
{
	Init();
	Create( m, n, rElement );
}

ZRealMatrix::ZRealMatrix( int m, int n, const REAL* prData )
{
	Init();
	Create( m, n, prData );
}

ZRealMatrix::ZRealMatrix( int m, int n, const REAL** pprData )
{
	Init();
	Create( m, n, pprData ); 
}

ZRealMatrix::ZRealMatrix( const ZRealMatrix& mxInit )
{
	Init();
	//here I can't lock the copied buffer, this is a trick to prevent unnecessary 
	//buffer copy.
	AssignCopy( mxInit, FALSE );
//	Create( mxInit );
}

ZRealMatrix::~ZRealMatrix()
{
	Release();
}

void ZRealMatrix::Create( int m, int n )
{
	ASSERT( IsNull() );
	AllocBuffer( m, n );
}

void ZRealMatrix::Create( int m, int n, REAL rElement )
{
	ASSERT( IsNull() );
	Create( m, n );
	int nSize = GetSize();
	REAL* prMatrixData = GetMatrixData();
	for( int i=0; i<nSize; i++ ){
		prMatrixData[i] = rElement;
	}
}

void ZRealMatrix::Create( int m, int n, const REAL* prData )
{
	ASSERT( IsNull() );
	Create( m, n );
	REAL *prMatrixData = (REAL*)GetMatrixData();
	memcpy( prMatrixData, prData, sizeof(REAL)*m*n );
}

void ZRealMatrix::Create( int m, int n, const REAL** pprData )
{
	ASSERT( IsNull() );

	Create( m, n );
	REAL *prMatrixData = (REAL*)GetMatrixData();
	for( int i=0; i<m; i++ ){
		for( int j=0; j<n; j++ ){
			prMatrixData[i*n+j] = pprData[i][j];
		}
	}
}

void ZRealMatrix::Create( const ZRealMatrix& mxInit )
{
	ASSERT( IsNull() );

	AssignCopy( mxInit, TRUE );
}

void ZRealMatrix::SetUniform( REAL rElem )
{
	ASSERT( !IsNull() );

	REAL* pMxData = GetMatrixData();
	int nSize = GetSize();
	for( int i=0; i<nSize; i++ ){
		pMxData[i] = rElem;
	}
}

void ZRealMatrix::SetIdentity()
{
	ASSERT( !IsNull() );

	REAL* pMxData = GetMatrixData();
	int nDim = min( GetRow(), GetCol() );
	memset( pMxData, 0, sizeof(REAL)*GetSize() );

	for( int i=0; i<nDim; i++ ){
		pMxData[i*GetCol()+i] = 1.0;
	}
}

void ZRealMatrix::CopyBuffer( const REAL* prData, int nCount, int nOffset, int nSkip )
{
	ASSERT( !IsNull() );

	REAL* pMx = GetMatrixData()+nOffset;

	REAL* pMxEnd = GetMatrixData() + GetSize();

	for( int i=0; i<nCount && pMx<pMxEnd; i++ ){
		(*pMx) = (*prData);
		pMx += 1+nSkip;
	}
}

void ZRealMatrix::CopyBuffer( const REAL **pprData, int m, int n, int nOffset, int nSkip )
{
	ASSERT( !IsNull() );

	REAL* pMx = GetMatrixData()+nOffset;

	REAL* pMxEnd = GetMatrixData() + GetSize();

	for( int i=0; i<m; i++ ){
		for( int j=0; j<n; j++ ){
			if( pMx>=pMxEnd )return;
			(*pMx) = pprData[i][j];

			pMx += 1+nSkip;
		}
	}
}

void ZRealMatrix::Attach( REAL* pData, int nRow, int nCol )
{
	ASSERT( IsNull() );

	AllocBuffer( 0, 0 );
	GetData()->nRow = nRow;
	GetData()->nCol = nCol;

	GetData()->pMatrixData = pData;
}

REAL* ZRealMatrix::Detach()
{
	ASSERT( !IsNull() );
	ASSERT( GetData()->pmxLocker==this );
	ASSERT( MATRIX_HEAD_DATABUF(GetData()) != GetData()->pMatrixData );

	REAL* prMxData = GetMatrixData();

	GetData()->pMatrixData = NULL;
	Release();

	return prMxData;
}

void ZRealMatrix::UnlockBuffer()
{
	if( IsNull() ){
		return;
	}

	ASSERT( GetLocker()==this );

	GetData()->pmxLocker = NULL;
}

void ZRealMatrix::LockBuffer()
{
	if( IsNull() || GetLocker()==this ){
		return;
	}

	ASSERT( GetLocker()==NULL );

	GetData()->pmxLocker = this;
}

LPREALMATRIX ZRealMatrix::GetLocker() const
{
	return GetData()->pmxLocker;
}

//-------------------------------------------------------------------------------------------------
ZRealMatrix& ZRealMatrix::Verse()
{
	if( IsNull() )return *this;

	if( GetRow()==1 || GetCol()==1 ){
		Exchange( GetData()->nRow, GetData()->nCol );
		return *this;
	}

	ZRealMatrix mx = GetVerseMx();
	AssignCopy( mx, TRUE );
	return (*this);
}

ZRealMatrix& ZRealMatrix::Invert()
{
	ASSERT( GetRow() == GetCol() );
	ASSERT( FALSE );
//	::MatInvert( GetMatrixData(), GetRow() );
	return *this;
}

ZRealMatrix ZRealMatrix::GetVerseMx() const
{
	if( IsNull() ){
		return ZRealMatrix();
	}
	
	int nRow = GetRow();
	int nCol = GetCol();
	
	ZRealMatrix temp( GetCol(), GetRow() );
	REAL* prMxData = GetMatrixData();
	REAL* prMxTemp = temp.GetMatrixData();
	for( int i=0; i<nRow; i++ ){
		for( int j=0; j<nCol; j++ ){
			prMxTemp[j*nRow+i] = prMxData[i*nCol+j];
		}
	}
	temp.UnlockBuffer();
	return temp;

/*	ZRealMatrix temp( *this );

	temp.Verse();

	temp.UnlockBuffer();
	return temp;
*/
}

ZRealMatrix ZRealMatrix::GetInvertMx() const
{
	ASSERT( GetRow() == GetCol() );
	
	ZRealMatrix temp( *this );
	
	temp.Invert();
	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix ZRealMatrix::GetChildMx( int nRow, int nCol, int nRowLen, int nColLen ) const
{
	ASSERT( nRow>=m_nRowBase && nCol>=m_nColBase && nRow<m_nRowBase+GetRow() && nCol<m_nColBase+GetCol() );
	
	if( nRowLen==-1 ){
		nRowLen = m_nRowBase+GetRow()-nRow;
	}
	if( nColLen==-1 ){
		nColLen = m_nColBase+GetCol()-nCol;
	}
	
	ASSERT( nRow+nRowLen<=m_nRowBase+GetRow() && nCol+nColLen<=m_nColBase+GetCol() );
	
	ZRealMatrix temp( nRowLen, nColLen );
	for( int i=nRow; i<nRow+nRowLen; i++ ){
		for( int j=nCol; j<nCol+nColLen; j++ ){
			temp(i-nRow+1, j-nCol+1) = (*this)(i,j);
		}
	}
	
	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix ZRealMatrix::GetRowMx( int nRow ) const
{
	ASSERT( !IsNull() );
	ASSERT( nRow>=m_nRowBase && nRow<m_nRowBase+GetRow() );

	ZRealMatrix temp(1, GetCol());

	REAL* prMxTemp = temp.GetMatrixData();
	REAL* prMxData = GetMatrixData()+(nRow-m_nRowBase)*GetCol();

	memcpy( prMxTemp, prMxData, sizeof(REAL)*GetCol() );

	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix ZRealMatrix::GetColMx( int nCol ) const
{
	ASSERT( !IsNull() );
	ASSERT( nCol<=GetCol() );

	ZRealMatrix temp(1, GetCol());

	REAL* prMxTemp = temp.GetMatrixData();

	for( int i=0; i<GetRow(); i++ ){
		prMxTemp[i] = (*this)(i+1, nCol);
	}

	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix& ZRealMatrix::ElemPower( REAL t )
{
	if( IsNull() )return (*this);

	int nSize = GetSize();
	REAL* pMxData = GetMatrixData();
	for( int i=0; i<nSize; i++ ){
		pMxData[i] = pow( pMxData[i], t );
	}
	return (*this);
}

//-------------------------------------------------------------------------------------------------
ZRealMatrix ZRealMatrix::operator () ( int i ) const
{
	return GetRowMx(i);
}

ZRealMatrix ZRealMatrix::operator [] ( int i ) const
{
	return GetColMx(i);
}

REAL& ZRealMatrix::operator () ( int i, int j )
{
	return *(GetMatrixData() + Index(i, j) );
}

REAL ZRealMatrix::operator() ( int i, int j ) const
{
	return *(GetMatrixData() + Index(i,j) );
}

//-------------------------------------------------------------------------------------------------
ZRealMatrix& ZRealMatrix::operator = ( const ZRealMatrix& mx )
{
	AssignCopy( mx, TRUE );
	return *this;
}

ZRealMatrix ZRealMatrix::operator - ()
{
	ZRealMatrix temp = *this;
	temp.Neg();
	temp.UnlockBuffer();
	return temp;
}

ZRealMatrix& ZRealMatrix::operator += ( const ZRealMatrix& mx )
{
	return Add( mx );
}

ZRealMatrix& ZRealMatrix::operator -= ( const ZRealMatrix& mx )
{
	return Sub( mx );
}

ZRealMatrix& ZRealMatrix::operator *= ( REAL f )
{
	return Mul( f );
}

ZRealMatrix& ZRealMatrix::operator /= ( REAL f )
{
	return Div( f );
}

ZRealMatrix& ZRealMatrix::operator ^= ( int t )
{
	ASSERT( FALSE );
	return *this;
}

	
/*------------------------------------------------------------------------*/
/*                                                                        */
/*  ZRealMatrix protected member function                                     */
/*                                                                        */
/*------------------------------------------------------------------------*/

/*ZRealMatrix& ZRealMatrix::Assign( ZRealMatrix& other )
{
	ASSERT( (m_Row==other.m_Row) && (m_Col==other.m_Col) );
	for( int i=0; i<Length(); i++ ){
		m_Data[i] = other.m_Data[i];
	}
	return *this;
}


*/

/*------------------------------------------------------------------------*/
/*                                                                        */
/*  ZRealMatrix friend function                                               */
/*                                                                        */
/*------------------------------------------------------------------------*/

ZRealMatrix operator + ( const ZRealMatrix& mx1, const ZRealMatrix& mx2 )
{
	ZRealMatrix temp;
	temp.Create( mx1 );

	temp += mx2;
	temp.UnlockBuffer();
	return temp;
}


ZRealMatrix operator - ( const ZRealMatrix& mx1, const ZRealMatrix& mx2 )
{
	ZRealMatrix temp;
	temp.Create( mx1 );

	temp -= mx2;
	temp.UnlockBuffer();
	return temp;
}


ZRealMatrix operator * ( const ZRealMatrix& mx1, const ZRealMatrix& mx2 )
{
/*	ZRealMatrix temp( mx1.GetRow(), mx1.GetRow() );
	temp.AssignCopy( mx1.GetData() );

	temp.Mul( mx1, mx2 );

	temp.UnlockBuffer();
	return temp;
*/
	ASSERT( mx1.GetCol()==mx2.GetRow() );

	ZRealMatrix temp( mx1.GetRow(), mx2.GetCol(), 0.0 );

	REAL* prMxData1 = mx1.GetMatrixData();
	REAL* prMxData2 = mx2.GetMatrixData();
	REAL* pxMxTemp = temp.GetMatrixData();

	for( int i=0; i<mx1.GetRow(); i++ ){
		for( int j=0; j<mx2.GetCol(); j++ ){
			for( int k=0; k<mx1.GetCol(); k++ ){
				pxMxTemp[i*temp.GetCol()+j] += prMxData1[i*mx1.GetCol()+k]*prMxData2[k*mx2.GetCol()+j];
			}
		}
	}
	temp.UnlockBuffer();
	return temp;
}


ZRealMatrix operator * ( REAL f, const ZRealMatrix& mx )
{
	return ZRealMatrix( mx )*= f;
}


ZRealMatrix operator / ( const ZRealMatrix& mx, REAL f )
{
	return ZRealMatrix( mx )/= f;
}

void ZRealMatrix::WriteData( ostream& os ) const
{
	for( int i=m_nRowBase; i<=m_nRowBase+GetRow()-1; i++ ){
		for( int j=m_nColBase; j<m_nColBase+GetCol()-1; j++ ){
			os<<(*this)(i,j)<<",";
		}
		os<<(*this)(i,j)<<endl;
	}
}


void ZRealMatrix::ReadData( istream& is )
{
	for( int i=0; i<GetSize(); i++ ) is>>GetMatrixData()[i];
}

ostream& operator << ( ostream& os, ZRealMatrix& t )
{
	t.WriteData( os );
	return os;
}


istream& operator >> ( istream& is, ZRealMatrix& t )
{
	t.ReadData( is );
	return is;
}

